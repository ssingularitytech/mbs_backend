{"version":3,"sources":["app/simulation/redux/Analytics.action.react.js","app/simulation/charts/QuoRadialProgressChart.react.jsx","app/simulation/charts/QuoRadarChart.react.jsx","app/simulation/pages/Analytics.react.jsx","app/simulation/AnalyticsContainer.react.jsx"],"names":["AnalyticsAction","getUserList","dispatch","getState","Request","fetch","then","response","json","data","catch","err","console","log","getUserData","id","getUserListOfSimulation","QuoRadialProgressChart","name","isNaN","this","props","value","Math","round","style","position","width","height","cx","cy","innerRadius","outerRadius","fill","color","paddingAngle","dataKey","map","entry","index","key","top","left","transform","PureComponent","defaultProps","QuoRadarChart","domain","stroke","getAppConfig","colors","secondary","fillOpacity","Analytics","state","score","competencyMap","overall","competency","actual","analytical","fullMark","creative","methodical","frugal","problemSolving","decisionMaking","balanced","timeManagement","costManagement","resourceful","radialContainer","textAlign","lineHeight","questions","Segment","basic","margin","fontSize","Divider","background","padding","Grid","Row","Column","marginLeft","paddingBottom","master","_","questionList","slice","length","question","Label","size","marginBottom","AnalyticsContainer","downloadReportPage","setState","syncing","reportPageView","document","querySelector","html2canvas","useCORS","canvas","imgData","toDataURL","pdf","jsPDF","internal","pageSize","getWidth","getHeight","addImage","save","replace","toLowerCase","nameToHex","hash","i","charCodeAt","hexColor","toString","substr","fixColor","result","exec","parseInt","R","substring","G","B","getAvatar","x","y","textAnchor","upperCase","split","goBack","hashHistory","push","username","userCollege","userDesc","userData","fetchComplete","params","find","questionId","actions","user","email","nickname","isPortrait","window","innerHeight","innerWidth","mainPanel","paddingTop","pageStyle","container","boxShadow","tabber","transformOrigin","bannerSection","bannerStyle","image","overlay","opacity","profileImage","bottom","profileName","zIndex","userName","pageTitle","right","actionMenu","logo","logoImage","className","Image","src","Icon","link","circular","inverted","onClick","user_data","simParams","mailReportPage","React","Component","connect","auth","opsRecords"],"mappings":"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","file":"static/js/analytics.5fb33c2f.chunk.js","sourcesContent":["const getUserList = /* istanbul ignore next - Request and Pure passthrough */ () => {\n    return (dispatch, getState, Request) => {\n        return Request.fetch(\"/api/v1/simulation_results\")\n            .then(response => {\n                return response.json().then(data => {\n                    return data;\n                });\n            })\n            .catch(err => {\n                console.log(err);\n                return null;\n            });\n    };\n};\n\nconst getUserListOfSimulation = /* istanbul ignore next - Request and Pure passthrough */ id => {\n    return (dispatch, getState, Request) => {\n        return Request.fetch(\"/api/v1/simulation_results/simulation_index/\" + id)\n            .then(response => {\n                return response.json().then(data => {\n                    return data;\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n}\n\nconst getUserData = /* istanbul ignore next - Request and Pure passthrough */ id => {\n    return (dispatch, getState, Request) => {\n        return Request.fetch(\"/api/v1/simulation_results/\" + id + \"/simulation_show/\" + \"1\")\n            .then(response => {\n                return response.json().then(data => {\n                    return data;\n                });\n            })\n            .catch(err => {\n                console.log(err);\n                return null;\n            });\n    };\n};\n\nclass AnalyticsAction {\n    static getUserList = getUserList;\n    static getUserData = getUserData;\n    static getUserListOfSimulation = getUserListOfSimulation;\n}\n\nexport default AnalyticsAction;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PieChart, Pie, Cell } from \"recharts\";\n\nexport default class QuoRadialProgressChart extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    color: PropTypes.string,\n    value: PropTypes.number.isRequired\n  };\n  static defaultProps = {\n    width: 200,\n    height: 200,\n    color: \"#8884d8\"\n  };\n  render() {\n    let data = [\n      {\n        name: isNaN(this.props.value)\n          ? \"-\"\n          : Math.round(this.props.value) + \"%\",\n        value: isNaN(this.props.value) ? 0 : Math.round(this.props.value)\n      },\n      {\n        name: \"\",\n        value: isNaN(this.props.value)\n          ? 100\n          : 100 - Math.round(this.props.value)\n      }\n    ];\n    return (\n      <div\n        style={{\n          position: \"relative\",\n          width: this.props.width,\n          height: this.props.height\n        }}\n      >\n        <PieChart width={this.props.width} height={this.props.height}>\n          <Pie\n            data={data}\n            cx={\"50%\"}\n            cy={\"50%\"}\n            innerRadius={this.props.width / 2 - 40}\n            outerRadius={this.props.width / 2 - 20}\n            fill={this.props.color}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={index === 0 ? this.props.color : \"#cccccc\"}\n              />\n            ))}\n          </Pie>\n        </PieChart>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            color: \"#454545\"\n          }}\n        >\n          {data[0].name}\n        </div>\n      </div>\n    );\n  }\n}\n","// Import from NPM\n// -------------------------------------\n\nimport React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Import from Config\n// -------------------------------------\nimport { getAppConfig } from \"config/client.config\";\n\nimport {\n    Radar,\n    RadarChart,\n    PolarGrid,\n    PolarAngleAxis,\n    PolarRadiusAxis,\n    Tooltip\n} from \"recharts\";\n\nexport default class QuoRadarChart extends PureComponent {\n    static propTypes = {\n        width: PropTypes.number,\n        height: PropTypes.number,\n        data: PropTypes.array.isRequired,\n        color: PropTypes.string\n    };\n    static defaultProps = {\n        width: 700,\n        height: 700,\n        color: \"#fe3456\"\n    };\n    render() {\n        return (\n            <RadarChart\n                cx={\"50%\"}\n                cy={\"50%\"}\n                outerRadius={this.props.width / 3.25}\n                width={this.props.width}\n                height={this.props.height}\n                data={this.props.data}\n            >\n                <PolarGrid />\n                <PolarAngleAxis dataKey=\"competency\" />\n                <PolarRadiusAxis domain={[0,100]} />\n                <Radar\n                    name=\"Competency Score\"\n                    dataKey=\"actual\"\n                    stroke={getAppConfig().colors.secondary}\n                    fill={\"#82ca9d\"}\n                    fillOpacity={0.8}\n                />\n                <Tooltip />\n            </RadarChart>\n        );\n    }\n}\n","import React, { PureComponent } from \"react\";\nimport _ from \"lodash\";\nimport { Segment, Divider, Grid, Label } from \"semantic-ui-react\";\n\n// Import from Config\n// -------------------------------------\nimport { getAppConfig } from \"config/client.config\";\n\nimport QuoRadialProgressChart from \"../charts/QuoRadialProgressChart.react\";\nimport QuoRadarChart from \"../charts/QuoRadarChart.react\";\n\nexport default class Analytics extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: this.props.competencyMap.overall,\n            competencyMap: [\n                {\n                    competency: \"Analytical\",\n                    actual: this.props.competencyMap.analytical,\n                    fullMark: 100\n                },\n                {\n                    competency: \"Creative\",\n                    actual: this.props.competencyMap.creative,\n                    fullMark: 100\n                },\n                {\n                    competency: \"Methodical\",\n                    actual: this.props.competencyMap.methodical,\n                    fullMark: 100\n                },\n                {\n                    competency: \"Frugal\",\n                    actual: this.props.competencyMap.frugal,\n                    fullMark: 100\n                }\n            ],\n            problemSolving: this.props.competencyMap.problemSolving,\n            decisionMaking: this.props.competencyMap.decisionMaking,\n            balanced: this.props.competencyMap.balanced,\n            timeManagement: this.props.competencyMap.timeManagement,\n            costManagement: this.props.competencyMap.costManagement,\n            resourceful: this.props.competencyMap.resourceful\n        };\n    }\n\n    render() {\n        let pageStyle = {\n            courseSection: {\n                marginLeft: \"25px\",\n                width: \"720px\",\n                height: \"555px\"\n            },\n            aggregate: {\n                base: {\n                    width: \"760px\",\n                    textAlign: \"center\",\n                    padding: \"0\"\n                },\n                radial: {\n                    width: \"230px\",\n                    display: \"inline-block\"\n                }\n            }\n        };\n        let radialContainer = {\n            textAlign: \"center\",\n            lineHeight: \"1.1\"\n        };\n        console.log(this.props.questions)\n        return (\n            <Segment basic>\n                <div\n                    style={{\n                        margin: \"100px 5% 0 5%\",\n                        width: \"90%\",\n                        textAlign: \"center\"\n                    }}\n                >\n                    <Segment>\n                        <h2 style={{ margin: 0 }}>AGGREGATE SCORE:</h2>\n                        <h1\n                            style={{\n                                margin: 0,\n                                fontSize: \"3.2em\"\n                            }}\n                        >\n                            {this.state.score}%\n                        </h1>\n                    </Segment>\n                </div>\n                <div style={{ margin: \"40px 5% 20px 5%\", width: \"90%\" }}>\n                    <Divider />\n                    <h1\n                        style={{\n                            margin: \"-32px auto\",\n                            width: \"300px\",\n                            background: \"#f5f5f5\",\n                            textAlign: \"center\"\n                        }}\n                    >\n                        COMPETENCY MAP\n                    </h1>\n                </div>\n                <Segment basic style={pageStyle.aggregate.base}>\n                    <Grid>\n                        <Grid.Row>\n                            <Grid.Column width={9}>\n                                <Segment basic style={{ marginLeft: \"15px\" }}>\n                                    <QuoRadarChart\n                                        width={380}\n                                        height={380}\n                                        data={this.state.competencyMap}\n                                    />\n                                </Segment>\n                            </Grid.Column>\n                            <Grid.Column width={7}>\n                                <Segment\n                                    basic\n                                    style={{ paddingBottom: \"21px\" }}\n                                >\n                                    <Grid>\n                                        <Grid.Row>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={\n                                                        this.state\n                                                            .problemSolving\n                                                    }\n                                                />\n                                                Problem Solving\n                                            </Grid.Column>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={\n                                                        this.state\n                                                            .decisionMaking\n                                                    }\n                                                />\n                                                Decision Making\n                                            </Grid.Column>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={this.state.balanced}\n                                                />\n                                                Balanced Approach\n                                            </Grid.Column>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={\n                                                        this.state\n                                                            .timeManagement\n                                                    }\n                                                />\n                                                Time Management\n                                            </Grid.Column>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={\n                                                        this.state\n                                                            .costManagement\n                                                    }\n                                                />\n                                                Cost Management\n                                            </Grid.Column>\n                                            <Grid.Column\n                                                width={8}\n                                                style={radialContainer}\n                                            >\n                                                <QuoRadialProgressChart\n                                                    width={128}\n                                                    height={100}\n                                                    color={\n                                                        getAppConfig().colors\n                                                            .master\n                                                    }\n                                                    value={\n                                                        this.state.resourceful\n                                                    }\n                                                />\n                                                Resourcefulness\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Segment>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Segment>\n                <div style={{ margin: \"20px 5% 40px 5%\", width: \"90%\" }}>\n                    <Divider />\n                    <h1\n                        style={{\n                            margin: \"-32px auto\",\n                            width: \"300px\",\n                            background: \"#f5f5f5\",\n                            textAlign: \"center\"\n                        }}\n                    >\n                        KEY ATTRIBUTES\n                    </h1>\n                </div>\n                <Segment basic style={{ textAlign: \"center\" }}>\n                    {_.map(\n                        this.props.questionList.slice(\n                            3,\n                            this.props.questionList.length\n                        ),\n                        (question, index) => {\n                            return (\n                                <Label\n                                    color=\"yellow\"\n                                    key={\"profile-tag-\" + index}\n                                    size=\"big\"\n                                    style={{ marginBottom: \"5px\" }}\n                                >\n                                    {question.response}\n                                </Label>\n                            );\n                        }\n                    )}\n                </Segment>\n            </Segment>\n        );\n    }\n}\n","// Import from NPM\n// -------------------------------------\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\nimport { Image, Icon } from \"semantic-ui-react\";\nimport { hashHistory } from \"react-router\";\n\n// Import Actions and Helpers\n// -------------------------------------\nimport AnalyticsAction from \"./redux/Analytics.action.react\";\nimport { Loading } from \"globals/Loading.react\";\n\n// Import from Config\n// -------------------------------------\nimport { getAppConfig } from \"config/client.config\";\n\n// Import Components\n// -------------------------------------\nimport Analytics from \"./pages/Analytics.react\";\n\n/**\n * The AnalyticsContainer is the top level component connected to the redux store.\n */\nexport class AnalyticsContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            userCollege: \"\",\n            userDesc: \"\",\n            userData: {},\n            fetchComplete: false\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.params.id === \"0\")\n            this.setState({\n                username: _.find(this.props.questions, { questionId: \"A1\" })\n                    .response,\n                userCollege: _.find(this.props.questions, {\n                    questionId: \"A2\"\n                }).response,\n                userDesc: _.find(this.props.questions, { questionId: \"A3\" })\n                    .response,\n                fetchComplete: true\n            });\n        else\n            this.props.actions.getUserData(this.props.params.id).then(data => {\n                this.setState({\n                    userData: data,\n                    username: data.user.name,\n                    userCollege: data.user.email,\n                    userDesc: data.user.nickname,\n                    fetchComplete: true\n                });\n            });\n    }\n\n    downloadReportPage = name => {\n        this.setState({ syncing: true }, () => {\n            let reportPageView = document.querySelector(\".reportPage\");\n            html2canvas(reportPageView, { useCORS: true }).then(canvas => {\n                let imgData = canvas.toDataURL(\"image/png\");\n                var pdf = new jsPDF(\"p\", \"mm\", \"a4\", true);\n                var width = pdf.internal.pageSize.getWidth();\n                var height = pdf.internal.pageSize.getHeight();\n                pdf.addImage(imgData, \"PNG\", 0, 0, width, height, \"\", \"SLOW\");\n                pdf.save((name + \".pdf\").replace(/ /g, \"_\").toLowerCase());\n                this.setState({ syncing: false });\n            });\n        });\n    };\n\n    nameToHex = name => {\n        let hash = 0;\n        for (let i = 0; i < name.length; i++) {\n            hash = name.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        let hexColor = \"#\";\n        for (let i = 0; i < 3; i++) {\n            let value = (hash >> (i * 8)) & 0xff;\n            hexColor += (\"00\" + value.toString(16)).substr(-2);\n        }\n        return hexColor;\n    };\n\n    fixColor = name => {\n        let hexColor = this.nameToHex(name);\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n        let color = {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        };\n        if (color.r * 0.299 + color.g * 0.587 + color.b * 0.114 > 186) {\n            var R = parseInt(hexColor.substring(1, 3), 16);\n            var G = parseInt(hexColor.substring(3, 5), 16);\n            var B = parseInt(hexColor.substring(5, 7), 16);\n\n            R = parseInt((R * 60) / 100, 0);\n            G = parseInt((G * 60) / 100, 0);\n            B = parseInt((B * 60) / 100, 0);\n\n            R = R < 255 ? R : 255;\n            G = G < 255 ? G : 255;\n            B = B < 255 ? B : 255;\n\n            var RR =\n                R.toString(16).length === 1\n                    ? \"0\" + R.toString(16)\n                    : R.toString(16);\n            var GG =\n                G.toString(16).length === 1\n                    ? \"0\" + G.toString(16)\n                    : G.toString(16);\n            var BB =\n                B.toString(16).length === 1\n                    ? \"0\" + B.toString(16)\n                    : B.toString(16);\n\n            return \"#\" + RR + GG + BB;\n        } else {\n            return hexColor;\n        }\n    };\n\n    getAvatar = (name, size) => {\n        return (\n            <svg height={size} width={size}>\n                <rect\n                    fill={this.fixColor(name)}\n                    x=\"0\"\n                    y=\"0\"\n                    height={size}\n                    width={size}\n                />\n                <text\n                    fill={\"#ffffff\"}\n                    fontSize={size / 2}\n                    textAnchor=\"middle\"\n                    x={size * 0.5}\n                    y={size * 0.67}\n                >\n                    {_.upperCase(name.split(\" \")[0][0])}\n                    {_.upperCase(\n                        name.split(\" \").length === 1\n                            ? _.upperCase(name.split(\" \")[0][1])\n                            : name.split(\" \")[1][0]\n                    )}\n                </text>\n            </svg>\n        );\n    };\n\n    goBack = () => hashHistory.push(\"/analytics\");\n\n    render() {\n        let isPortrait = window.innerHeight > window.innerWidth;\n        let mainPanel = {\n            width: isPortrait ? \"calc(100% - 50px)\" : \"calc(100%)\",\n            height: \"100%\",\n            marginLeft: isPortrait ? \"50px\" : \"auto\",\n            paddingTop: \"8px\"\n        };\n\n        let pageStyle = {\n            container: {\n                position: \"relative\",\n                width: \"800px\",\n                height: \"1100px\",\n                margin: \"20px auto\",\n                background: \"#f5f5f5\",\n                boxShadow: \"1px 1px 1px 1px #ccc\"\n            },\n            tabber: {\n                position: \"absolute\",\n                left: \"0\",\n                top: \"10px\",\n                transformOrigin: \"0px 0px\",\n                transform: \"rotate(90deg)\"\n            },\n            bannerSection: {\n                width: \"100%\",\n                height: \"0\",\n                paddingBottom: \"12.5%\",\n                position: \"relative\"\n            }\n        };\n        let bannerStyle = {\n            image: {\n                width: \"100%\"\n            },\n            overlay: {\n                position: \"absolute\",\n                top: \"0\",\n                left: \"0\",\n                width: \"100%\",\n                height: \"0\",\n                paddingBottom: \"12.5%\",\n                background:\n                    \"linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(0,0,0,1) 100%)\",\n                opacity: \"0.5\"\n            },\n            profileImage: {\n                position: \"absolute\",\n                left: \"40px\",\n                bottom: \"-100px\",\n                width: \"160px\",\n                height: \"160px\",\n                background: \"#ffffff\",\n                boxShadow: \"1px 1px 1px 1px #666666\"\n            },\n            profileName: {\n                position: \"absolute\",\n                left: \"220px\",\n                bottom: \"-100px\",\n                zIndex: \"9999\",\n                width: \"400px\"\n            },\n            userName: {\n                padding: 0,\n                margin: 0\n            },\n            pageTitle: {\n                position: \"absolute\",\n                right: \"15%\",\n                top: \"28%\",\n                transform: \"translate(0,-50%)\",\n                color: \"#ffffff\",\n                lineHeight: \"0.9\",\n                textAlign: \"right\"\n            },\n            actionMenu: {\n                position: \"absolute\",\n                right: \"40px\",\n                bottom: \"-80px\",\n                zIndex: \"9999\"\n            },\n            logo: {\n                width: \"25%\",\n                height: \"100%\",\n                background: \"#454545\",\n                position: \"absolute\",\n                top: \"0\",\n                right: \"0\"\n            },\n            logoImage: {\n                width: \"80%\",\n                margin: \"10%\"\n            }\n        };\n\n        if (!this.state.fetchComplete) return <Loading />;\n        else\n            return (\n                <div className=\"full-height isRelative\">\n                    <div style={mainPanel}>\n                        <div style={pageStyle.container} className=\"reportPage\">\n                            <div style={pageStyle.bannerSection}>\n                                <Image\n                                    src={\n                                        \"assets/images/reportBanners/\" +\n                                        this.nameToHex(this.state.username)[1] +\n                                        \".jpg\"\n                                    }\n                                    style={bannerStyle.image}\n                                />\n                                <div style={bannerStyle.overlay} />\n                                <div style={bannerStyle.profileImage}>\n                                    {this.getAvatar(this.state.username, 160)}\n                                </div>\n                                <div style={bannerStyle.profileName}>\n                                    <h1 style={bannerStyle.userName}>\n                                        {this.state.username}\n                                    </h1>\n                                    <h3 style={bannerStyle.userName}>\n                                        {this.state.userCollege}\n                                    </h3>\n                                    <p\n                                        style={{\n                                            fontSize:\n                                                this.state.userDesc.length > 30\n                                                    ? \"0.8em\"\n                                                    : \"1em\"\n                                        }}\n                                    >\n                                        {this.state.userDesc}\n                                    </p>\n                                </div>\n                                {!this.state.syncing && (\n                                    <div style={bannerStyle.actionMenu}>\n                                        <Icon\n                                            link\n                                            circular\n                                            inverted\n                                            name={\"chevron left\"}\n                                            size=\"big\"\n                                            onClick={this.goBack}\n                                        />\n                                        <Icon\n                                            link\n                                            circular\n                                            inverted\n                                            name={\"print\"}\n                                            size=\"big\"\n                                            onClick={() =>\n                                                this.downloadReportPage(\n                                                    \"learner_analytics_\" +\n                                                        this.state.username.replace(\n                                                            \" \",\n                                                            \"_\"\n                                                        )\n                                                )\n                                            }\n                                        />\n                                    </div>\n                                )}\n                                <div style={bannerStyle.logo}>\n                                    <Image\n                                        src=\"assets/images/configurable/logo.png\"\n                                        style={bannerStyle.logoImage}\n                                    />\n                                </div>\n                            </div>\n                            <Analytics\n                                {...this.props}\n                                questionList={\n                                    this.props.params.id === \"0\"\n                                        ? this.props.questions\n                                        : this.state.userData.user_data\n                                              .questions\n                                }\n                                competencyMap={\n                                    this.props.params.id === \"0\"\n                                        ? this.props.simParams.competencyMap\n                                        : this.state.userData.user_data\n                                              .simParams.competencyMap\n                                }\n                                downloadReportPage={this.downloadReportPage}\n                                mailReportPage={this.mailReportPage}\n                                getAvatar={this.getAvatar}\n                                nameToHex={this.nameToHex}\n                                syncing={this.state.syncing}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n    }\n}\n\nconst mapStateToProps = /* istanbul ignore next - redux function */ state => {\n    return {\n        auth: state.auth,\n        questions: state.questions,\n        simParams: state.simParams,\n        opsRecords: state.opsRecords\n    };\n};\n\nconst mapDispatchToProps = /* istanbul ignore next - redux function */ dispatch => {\n    return {\n        actions: {\n            getUserList: () => {\n                return dispatch(AnalyticsAction.getUserList());\n            },\n            getUserData: id => {\n                return dispatch(AnalyticsAction.getUserData(id));\n            }\n        }\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AnalyticsContainer);\n"],"sourceRoot":""}