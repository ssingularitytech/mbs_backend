{"version":3,"sources":["state/storage/FakeLocalStorage.js","state/communication/FetchRequest.js","state/communication/AxiosRequest.js","state/communication/Request.js","state/authentication/redux/Authentication.reducer.react.js","app/simulation/redux/SimManager.reducer.react.js","app/simulation/redux/QuestionManager.reducer.react.js","state/storage/root.reducer.js","state/storage/app.store.js","config/configPanel/config.userInterface.js","config/app.config.js","config/configPanel/config.namedRoutes.js","config/configPanel/config.design.js","config/configPanel/config.loginpage.js","serviceWorker.js","app/App.js","index.js","state/authentication/redux/Authentication.action.react.js","globals/Loading.react.jsx","config/configPanel/config.endpoints.js","config/client.config.js","app/simulation/redux/SimManager.action.react.js","app/simulation/redux/QuestionManager.action.react.js"],"names":["FakeLocalStorage","this","storage","key","value","callback","Promise","resolve","reject","console","debug","keys","Object","FetchRequest","path","data","domain","apiUrl","url","indexOf","headers","body","toString","getToken","then","tokenHash","defaults","config","_","merge","fetch","response","status","expiry","get","client","token","tokenType","uid","setToken","json","err","includes","getAppConfig","auth","routes","unauthenticatedRoot","helpDesk","hashHistory","getCurrentLocation","pathname","error","Error","statusText","errors","replace","logout","query","message","messageType","catch","localforage","removeItem","stringyfiedTokenHashEncoded","JSON","stringify","simpleCrypto","SimpleCrypto","secretKey","encryptedValue","encrypt","setItem","tokenValue","getItem","decryptedValue","decrypt","parse","startTime","endTime","Date","getTime","apiUrls","ok","blob","size","log","speed","AxiosRequest","axios","baseURL","timeout","maxRedirects","transformRequest","formData","isStringified","isString","isFormData","post","patch","common","getTokenHeadersFromLocalStore","setTokenForNextRequestFromLocalStore","methodData","credentials","withCredentials","all","setDefaults","checkAndSetTokenForRequest","responses","checkForExpiry","request","setTokenHeadersForNextRequest","errorCatching","logoutAndResetToken","setTokenHeadersInLocalStore","undefined","startsWith","Accept","configUrl","endpoints","emailSignInPath","emailForgotPasswPath","emailSignInPathBypass","emailRegistrationPath","timestamp","now","parseInt","logoutPath","signOutPath","method","resetToken","Store","dispatch","type","LOGOUT","loginPath","login","push","options","responseType","serverBase","serevrLoginPath","serevrLogoutPath","isServerLoginRequest","isServerLogoutRequest","exceptionError","getFetchAsseyOptions","assetHelpers","fileSystem","zip","window","Request","AppConfig","axiosEnabled","initialAuthState","user","license","appConfiguration","isUserLoggedIn","sessions","initialParamsState","ai","bi","ii","bc","blp","unused","valuation","fundRaise","dilution","co","sa","cs","fr","cm","blt","team","productFixed","angelFixed","teamFixed","simOver","lastLocation","trackers","overtimeCounter","competencyMap","creative","analytical","frugal","methodical","problemSolving","decisionMaking","balanced","timeManagement","costManagement","resourceful","overall","RootReducer","combineReducers","newState","state","action","REHYDRATE","payload","LOGIN","id","SESSION","sessionId","userId","length","lastSession","pullAt","isActive","sessionData","OMNIAUTHLOGIN","UPDATE_CONFIG","cloneDeep","assign","partConfig","GET_LICENSE","ACCEPT_COOKIES","routing","routerReducer","simParams","SET_SIM_PARAMS","questions","SAVE_ANSWERS","each","question","existingResponse","find","questionId","splice","enableLocalForage","localStorage","e","composeWithDevTools","applyMiddleware","thunkMiddleware","withExtraArgument","autoRehydrate","createStore","persistStoreConfig","whitelist","fakeLocalStorage","userInterface","clientApp","languageSelection","searchEnabled","ttsEnabled","startOnHome","subNavBar","authentication","label","help","defaultEmail","defaultPassword","registration","allowed","subtle","restricted","allowedDomains","footer","isThere","text","hasLogo","singleCourse","isEnabled","showMenu","ilt","enabled","social","fonts","union","language","isMobile","isCordova","authenticatedRoot","signup","forgotPassword","backListSessionPath","maxSessions","omniauth","notifications","notificationFetchTimeGap","notificatioCountFetchTimeGap","custom","families","urls","map","slice","elm","index","colors","master","masterText","iconBg","navbar","tileBg","courseBg","textList","tileText","iconColor","itemImgBg","navbarBtn","navigator","navsubbar","topicList","courseName","drawerMenu","footerText","headerText","listBarBtn","tileIconBg","headerBlock","overallCard","navbarBtnTxt","listBarLeader","navigatorHome","navigatorText","drawerMenuItem","drawerMenuText","listBarBtnText","drawerMenuDarker","drawerMenuLeader","navbarBtnMenuBtn","navbarTransparentBtn","notificationText","reportsIconColor","sublogoTextColor","listBarLeaderText","reportsLabelColor","listBarDescription","completionIndicator","drawerMenuActiveItem","drawerMenuActiveText","drawerMenuLeaderText","courseListItemCurrent","drawerMenuDisableItem","drawerMenuDisableText","courseListItemComplete","drawerMenuLeaderHeader","listBarDescriptionText","notificationBackground","courseListingHeaderBack","courseListingHeaderText","courseListItemIncomplete","courseListItemCurrentText","courseListItemCompleteText","courseListItemIncompleteText","appStyle","background","backgroundImage","libraryBg","desktopImage","landscapeBg","brandingLogo","loginLogo","coLogo","footerLogo","fontFamily","buttonStyle","color","borderRadius","secondaryButtonStyle","headerStyle","textStyle","textInputStyle","padding","fontSize","pageStyle","position","height","width","top","left","style","margin","appLogoStyle","display","boxStyle","Boolean","location","hostname","match","LoadableAuthenticationContainer","Loadable","loader","loading","Loading","LoadableWelcome","LoadableSimulation","LoadableSurvey","LoadableResult","LoadableUserList","LoadableAnalytics","App","props","manageStore","purge","persistStore","existing_user","setState","rehydrated","requireLogin","bind","alreadyLoggedIn","WebFont","load","nextState","unauthRoot","getState","authRoot","returnValue","history","syncHistoryWithStore","component","onEnter","React","Component","ReactDOM","render","store","document","getElementById","serviceWorker","ready","unregister","_login","_logout","preprocessLoginDetails","firstField","passwordField","processedFirstField","chain","trim","toLower","processedPasswordField","split","join","validateLoginDetails","firstFieldType","errorMessage","AuthenticationAction","password","apiURL","FormData","loginDetails","validateLoginDetail","append","userData","email","provider","register","name","confirm","session","passwChangePath","omniAuthLogin","userDetail","accessToken","omit","bypassLogin","username","first_name","last_name","admin","system_generated","total_online_time","total_first_online_time","user_active","role_select","app_configuration","updateConfig","configHash","updateConfigPath","resp","getLicense","getLicensePath","_getLicense","src","transform","alt","maxWidth","assetUrl","assetLib","passwordResetPath","passwordUpdatePath","tokenValidationPath","simulationResultPath","initalState","storeState","_setSimParams","SimManagerAction","setLastLocation","endSim","simulationId","creativeScore","score","Math","round","max","min","user_id","simulation_id","user_data","QuestionManagerAction","saveAnswers","answers"],"mappings":"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","file":"static/js/main.235c20a4.chunk.js","sourcesContent":["// fake localStorage - i use this with edux-persist when localStorage/localForage isn't available\nexport default class FakeLocalStorage {\n  constructor() {\n    this.storage = {}\n  }\n\n  setItem(key, value, callback) {\n    return new Promise((resolve, reject) => {\n      this.storage[key] = value\n      // eslint-disable-next-line no-console\n      console.debug('setItem called with ', key, value)\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  getItem(key, callback) {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line no-console\n      console.debug('getItem called with ', key)\n      const value = this.storage[key]\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  removeItem(key, callback) {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line no-console\n      console.debug('removeItem called with ', key)\n      const value = this.storage[key]\n      delete this.storage[key]\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  getAllKeys(callback) {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line no-console\n      console.debug('getAllKeys called')\n      const keys = Object.keys(this.storage)\n      if (callback) callback(null, keys)\n      resolve(keys)\n    })\n  }\n}","import _ from \"lodash\";\nimport { getAppConfig } from \"./../../config/client.config\";\nimport {\n    apiUrls\n} from \"./../../config/configPanel/config.endpoints\";\nimport localforage from \"localforage\";\nimport { hashHistory } from \"react-router\";\nimport SimpleCrypto from \"simple-crypto-js\";\n\nclass FetchRequest {\n    static apiUrl = apiUrls.apiUrl;\n    static token = null;\n    static tokenHash = {};\n    static speed = null;\n\n    static fetch(path, data, domain = this.apiUrl) {\n        let url = \"\";\n        if (path.indexOf(\"http://\") !== -1 || path.indexOf(\"file://\") !== -1) {\n            url = path;\n        } else {\n            url = domain + path;\n        }\n\n        let headers = {};\n\n        if (data && data.body.toString().indexOf(\"FormData\") === -1)\n            // headers = { \"Content-Type\": \"application/json\", mode: \"no-cors\" };\n            headers = { \"Content-Type\": \"application/json\" };\n        return this.getToken().then(tokenHash => {\n            headers = { ...headers, ...tokenHash };\n            let defaults = {\n                headers: headers\n            };\n\n            let config = _.merge({}, data, defaults);\n            return fetch(url, config)\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        const expiry = response.headers.get(\"expiry\");\n                        const client = response.headers.get(\"client\");\n                        const token = response.headers.get(\"access-token\");\n                        const tokenType = response.headers.get(\"token-type\");\n                        const uid = response.headers.get(\"uid\");\n                        this.setToken(token, client, expiry, tokenType, uid);\n                        return response;\n                    } else if (response.status >= 401) {\n                        return response.json().then(err => {\n                            const token = response.headers.get(\"access-token\");\n                            if (\n                                !token &&\n                                !_.includes(\n                                    [\n                                        getAppConfig().auth.routes\n                                            .unauthenticatedRoot,\n                                        getAppConfig().auth.routes.helpDesk\n                                    ],\n                                    hashHistory.getCurrentLocation().pathname\n                                )\n                            ) {\n                                hashHistory.replace({\n                                    pathname: getAppConfig().auth.routes.logout,\n                                    query: {\n                                        message: err.errors,\n                                        messageType: 2\n                                    }\n                                });\n                            } else {\n                                let error = new Error(response.statusText);\n                                error.response = response;\n                                error.errors = err.errors;\n                                throw error;\n                            }\n                        });\n                    } else {\n                        return response.json().then(err => {\n                            let error = new Error(response.statusText);\n                            error.response = response;\n                            error.errors = err.errors;\n                            throw error;\n                        });\n                    }\n                })\n                .catch(err => {\n                    let error;\n                    if (!err.errors) {\n                        error = new Error(\"Server Not Responded\");\n                        error.response = \"Server Not Responded\";\n                        error.errors = [\n                            \"The Request failed. Please make sure you are connected to Internet\"\n                        ];\n                        // TODO: Uncomment or chnage it if we find a plugin which work across everything\n                        // notify.show(error.errors[0], 'error')\n                    } else {\n                        error = err;\n                    }\n                    throw error;\n                });\n        });\n    }\n\n    static resetToken() {\n        this.token = null;\n        this.tokenHash = {};\n        localforage.removeItem(\"tokenHash\", null);\n    }\n\n    static setToken(\n        token,\n        client = null,\n        expiry = null,\n        tokenType = \"Bearer\",\n        uid\n    ) {\n        if (token) {\n            // if (!this.token) {\n            this.token = token;\n            this.tokenHash = {\n                \"access-token\": `${this.token}`,\n                \"token-type\": \"Bearer\",\n                expiry: expiry,\n                client: client,\n                uid: uid\n            };\n            // const stringyfiedTokenHashEncoded = btoa(\n            // JSON.stringify(this.tokenHash)\n            // );\n            const stringyfiedTokenHashEncoded = JSON.stringify(this.tokenHash);\n            // localforage.setItem(\"tokenHash\", stringyfiedTokenHashEncoded);\n            let simpleCrypto = new SimpleCrypto(getAppConfig().secretKey);\n            let encryptedValue = simpleCrypto.encrypt(stringyfiedTokenHashEncoded)\n            localforage.setItem(\"tokenHash\", encryptedValue);\n            // }\n        }\n    }\n\n    static getToken() {\n        let tokenValue = null;\n        if (this.token) {\n            tokenValue = this.tokenHash;\n            return Promise.resolve(tokenValue);\n        } else {\n            return localforage\n                .getItem(\"tokenHash\")\n                .then(stringyfiedTokenHashEncoded => {\n                    // tokenValue = JSON.parse(atob(stringyfiedTokenHashEncoded));\n                    let simpleCrypto = new SimpleCrypto(getAppConfig().secretKey);\n                    let decryptedValue = simpleCrypto.decrypt(stringyfiedTokenHashEncoded)\n                    tokenValue = JSON.parse(decryptedValue);\n                    return tokenValue;\n                })\n                .catch(err => {\n                    return {};\n                });\n        }\n    }\n\n    static getSpeed() {\n        let startTime, endTime, fileSize, url;\n        startTime = new Date().getTime();\n        // #TODO make url on rails side to send file, public assests cannot be fetched from other domain\n        url = getAppConfig().apiUrls.apiUrl + \"/api/v1/get_favicon\";\n        return fetch(url, {})\n            .then(response => {\n                endTime = new Date().getTime();\n                if (response.ok) {\n                    return response.blob().then(blob => {\n                        fileSize = blob.size;\n                        const speed =\n                            fileSize *\n                            8 /\n                            ((endTime - startTime) / 1000) /\n                            1024;\n                        return speed;\n                    });\n                } else {\n                    return Promise.resolve(0);\n                }\n            })\n            .catch(err => {\n                console.log(\"[getSpeed] could not load file get_favicon\");\n                return Promise.resolve(0);\n            });\n    }\n}\n\nexport { FetchRequest };\n","// Import from NPM\n// -------------------------------------\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport localforage from \"localforage\";\nimport SimpleCrypto from \"simple-crypto-js\";\nimport { hashHistory } from \"react-router\";\n// Import App Configuration and Setup\n// -------------------------------------\nimport { getAppConfig } from \"./../../config/client.config\";\n\n// Import App Actions and Reduxers\n// -------------------------------------\nimport { Store } from \"./../../state/storage/app.store\";\nimport { LOGOUT } from \"../authentication/redux/Authentication.action.react\";\nclass AxiosRequest {\n    static assetHelpers = {\n        fileSystem: null,\n        zip: null\n    };\n    // static _setUpAssetHelpers(fileSystem, zip) {\n    // \treturn new Promise((resolve, reject) => {\n    // \t\tif (fileSystem) {\n    // \t\t\tthis.fileSystem = fileSystem;\n    // \t\t}\n    // \t\tif (zip) {\n    // \t\t\tthis.zip = zip;\n    // \t\t}\n    // \t\tif (!this.zip) {\n    // \t\t\tthis.zip = window.zip ? window.zip : null;\n    // \t\t}\n    // \t\tif (fileSystem) {\n    // \t\t\tthis.fileSystem = fileSystem;\n    // \t\t}\n    // \t\tif (!this.fileSystem) {\n    // \t\t\tresolve();\n    // \t\t\t// this.fileSystem = window.requestFileSystem\n    // \t\t\t// \t? window.requestFileSystem(\n    // \t\t\t// \t\t\twindow.LocalFileSystem.PERSISTENT,\n    // \t\t\t// \t\t\t0,\n    // \t\t\t// \t\t\tfs => {\n    // \t\t\t// \t\t\t\tthis.fileSystem = fs;\n    // \t\t\t// \t\t\t\tresolve();\n    // \t\t\t// \t\t\t},\n    // \t\t\t// \t\t\treject\n    // \t\t\t// \t  )\n    // \t\t\t// \t: null;\n    // \t\t} else {\n    // \t\t\tconsole.error('The filesystem cannot be connected.');\n    // \t\t\treject('The filesystem cannot be connected.');\n    // \t\t}\n    // \t});\n    // }\n    static setDefaults() {\n        axios.defaults.baseURL = getAppConfig().apiUrls.apiUrl;\n        axios.defaults.timeout = 120000; // This is optimal for all API requests\n        axios.defaults.maxRedirects = 5;\n        axios.defaults.transformRequest = [\n            function(data, headers) {\n                // If the POST|PUT|PATCH call data is not stringified, the stringyfy them. If it is formdata, send it as it is.\n                if (data) {\n                    let formData = data;\n                    let isStringified = _.isString(formData);\n                    // If data is not strigified and not of type formdata, then stringify before sending.\n                    let isFormData =\n                        formData.toString().indexOf(\"FormData\") > -1;\n                    if (data && !isStringified && !isFormData) {\n                        data = JSON.stringify(data);\n                    }\n                    // If you sending data in body, the header has to be type application/json\n                    if (isStringified && !isFormData) {\n                        headers.post[\"Content-Type\"] = \"application/json\";\n                        headers.patch[\"Content-Type\"] = \"application/json\";\n                    }\n                }\n                return data;\n            }\n        ];\n        return Promise.resolve(0);\n    }\n    // This is to handle refresh or app close conditions, where headers of axios are reseted.\n    static checkAndSetTokenForRequest() {\n        // Check whether axios headers contains access token, if present then that what we wanted to do.\n        if (!axios.defaults.headers.common[\"access-token\"]) {\n            return this.getTokenHeadersFromLocalStore().then(tokenHash => {\n                return this.setTokenForNextRequestFromLocalStore(tokenHash);\n            });\n        } else {\n            // Token already Present\n            return Promise.resolve(0);\n        }\n    }\n\n    static fetch(path, data, domain = this.apiUrl) {\n        let methodData = _.merge({}, data, { url: path });\n        // Fetch JS backward Compatibility\n        if (data && data.body) {\n            methodData.data = methodData.body;\n        }\n        // Fetch JS backward Compatibility\n        if (data && data.credentials && data.credentials === \"include\") {\n            methodData.withCredentials = true;\n        }\n        return (\n            Promise.all([this.setDefaults(), this.checkAndSetTokenForRequest()])\n                .then(responses => {\n                    return this.checkForExpiry(path)\n                        .then(response => {\n                            return axios\n                                .request(methodData)\n                                .then(response => {\n                                    const headers = response.headers;\n                                    this.setTokenHeadersForNextRequest(\n                                        headers[\"access-token\"],\n                                        headers[\"client\"],\n                                        headers[\"expiry\"],\n                                        headers[\"uid\"],\n                                        headers[\"token-type\"]\n                                    );\n                                    return {\n                                        json: function() {\n                                            return Promise.resolve(\n                                                response.data\n                                            );\n                                        },\n                                        blob: function() {\n                                            return Promise.resolve(\n                                                response.data\n                                            );\n                                        },\n                                        ok: true\n                                    };\n                                })\n                                .catch(error => {\n                                    return this.errorCatching(error);\n                                });\n                        })\n                        .catch(error => {\n                            if (error.response) {\n                                return Promise.reject(error);\n                            } else {\n                                // handle expired tokens\n                                this.logoutAndResetToken();\n                            }\n                        });\n                })\n                // This will always be resoled so no need of catch handling.\n                .catch(error => {\n                    if (error.response) {\n                        return Promise.reject(error);\n                    } else {\n                        console.log(error);\n                    }\n                })\n        );\n    }\n\n    static setTokenHeadersForNextRequest(\n        token,\n        client,\n        expiry,\n        uid,\n        tokenType = \"Bearer\"\n    ) {\n        if (token && client && expiry && uid && tokenType) {\n            const tokenHash = {\n                \"access-token\": token,\n                \"token-type\": tokenType,\n                expiry: expiry,\n                client: client,\n                uid: uid\n            };\n            axios.defaults.headers.common = {\n                ...axios.defaults.headers.common,\n                ...tokenHash\n            };\n            this.setTokenHeadersInLocalStore(tokenHash);\n            Promise.resolve(axios.defaults.headers.common);\n        } /*else {\n\t\t\tlet error = new Error('Could not fetch headers from the request');\n\t\t\tPromise.reject(error);\n\t\t}*/\n    }\n\n    static setTokenForNextRequestFromLocalStore(tokenHash) {\n        if (\n            tokenHash[\"access-token\"] &&\n            tokenHash[\"token-type\"] &&\n            tokenHash[\"expiry\"] &&\n            tokenHash[\"client\"] &&\n            tokenHash[\"uid\"]\n        ) {\n            return Promise.resolve(\n                (axios.defaults.headers.common = {\n                    ...axios.defaults.headers.common,\n                    ...tokenHash\n                })\n            );\n        } else {\n            return Promise.resolve(\"No Token Set\");\n        }\n    }\n\n    static setTokenHeadersInLocalStore(tokenHash) {\n        const stringyfiedTokenHashEncoded = JSON.stringify(tokenHash);\n        const simpleCrypto = new SimpleCrypto(getAppConfig().secretKey);\n        const encryptedValue = simpleCrypto.encrypt(\n            stringyfiedTokenHashEncoded\n        );\n        localforage.setItem(\"tokenHash\", encryptedValue);\n    }\n\n    static getTokenHeadersFromLocalStore() {\n        return localforage\n            .getItem(\"tokenHash\")\n            .then(stringyfiedTokenHashEncoded => {\n                if (stringyfiedTokenHashEncoded) {\n                    const simpleCrypto = new SimpleCrypto(\n                        getAppConfig().secretKey\n                    );\n                    const decryptedValue = simpleCrypto.decrypt(\n                        stringyfiedTokenHashEncoded\n                    );\n                    const tokenValue = JSON.parse(decryptedValue);\n                    return tokenValue;\n                } else {\n                    // If LocalStore Doesn't have any token hash(generally in initial app start), retrun blank hash.\n                    return {};\n                }\n            });\n    }\n    // Backward compatibility\n    static getToken() {\n        return this.getTokenHeadersFromLocalStore();\n    }\n    static resolveURL(url, domain = undefined) {\n        let baseURL = null;\n        // To handle case of if url or file access protocol, make the base url as blank.\n        if (\n            _.startsWith(url, \"http://\") ||\n            _.startsWith(url, \"https://\") ||\n            _.startsWith(url, \"file://\")\n        ) {\n            baseURL = \"\";\n        } else {\n            if (\n                (domain && _.startsWith(domain, \"http://\")) ||\n                _.startsWith(domain, \"https://\")\n            ) {\n                baseURL = domain;\n            } else {\n                baseURL = getAppConfig().apiUrls.apiUrl;\n            }\n        }\n        axios.defaults.baseURL = baseURL;\n        return Promise.resolve(url);\n    }\n\n    static resetToken() {\n        return localforage.removeItem(\"tokenHash\", null).then(() => {\n            axios.defaults.headers.common = {\n                Accept: \"application/json, text/plain, */*\"\n            };\n            return 0;\n        });\n    }\n\n    static checkForExpiry(url) {\n        const configUrl = getAppConfig().endpoints;\n        if (\n            url === configUrl.emailSignInPath ||\n            url === configUrl.emailForgotPasswPath ||\n            url === configUrl.emailSignInPathBypass ||\n            url === configUrl.emailRegistrationPath\n        ) {\n            return Promise.resolve(0);\n        } else {\n            let expiry = axios.defaults.headers.common.expiry;\n            const timestamp = _.now() / 1000;\n            if (expiry) {\n                if (timestamp < _.parseInt(expiry)) return Promise.resolve(0);\n                else return Promise.reject(0);\n            } else {\n                return this.getTokenHeadersFromLocalStore().then(tokenHash => {\n                    if (tokenHash.expiry) {\n                        const timestamp = _.now() / 1000;\n                        if (timestamp < _.parseInt(expiry))\n                            return Promise.resolve(0);\n                        else return Promise.reject(0);\n                    } else {\n                        return Promise.reject(0);\n                    }\n                });\n            }\n        }\n    }\n\n    static logoutAndResetToken() {\n        const logoutPath = getAppConfig().endpoints.signOutPath;\n        return axios\n            .request(logoutPath, {\n                method: \"POST\",\n                body: \"\"\n            })\n            .then(() => {\n                return this.resetToken().then(() => {\n                    return Promise.resolve(\n                        Store.dispatch({ type: LOGOUT, status: \"success\" })\n                    ).then(() => {\n                        const loginPath = getAppConfig().auth.routes.login;\n                        hashHistory.push({\n                            pathname: loginPath,\n                            query: {\n                                message: [\"You need to sign in to continue\"],\n                                messageType: 2\n                            }\n                        });\n                    });\n                });\n            })\n            .catch(() => {\n                return this.resetToken().then(() => {\n                    return Promise.resolve(\n                        Store.dispatch({ type: LOGOUT, status: \"success\" })\n                    ).then(() => {\n                        const loginPath = getAppConfig().auth.routes.login;\n                        hashHistory.push({\n                            pathname: loginPath,\n                            query: {\n                                message: [\"You need to sign in to continue\"],\n                                messageType: 2\n                            }\n                        });\n                    });\n                });\n            });\n    }\n    static getFetchAsseyOptions() {\n        let options = {\n            ...axios.defaults,\n            ...{ responseType: \"blob\", Accept: \"application/octet-stream\" }\n        };\n        return Promise.resolve(options);\n    }\n\n    static errorCatching(error) {\n        // console.log(error.response);\n        // console.log(error.request);\n        // console.log(error.message);\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            // console.log(error.config);\n            const config = getAppConfig();\n            const serverBase = config.apiUrls.apiUrl;\n            const serevrLoginPath =\n                serverBase + config.endpoints.emailSignInPath;\n            const serevrLogoutPath = serverBase + config.endpoints.signOutPath;\n            const isServerLoginRequest = error.config.url === serevrLoginPath;\n            const isServerLogoutRequest = error.config.url === serevrLogoutPath;\n            let exceptionError = new Error(error.response.statusText);\n            exceptionError.response = error.response.data;\n            exceptionError.errors = error.response.data.errors;\n            if (error.response.status === 401) {\n                if (!(isServerLoginRequest || isServerLogoutRequest)) {\n                    return this.logoutAndResetToken().then(() => {\n                        return Promise.reject(exceptionError);\n                    });\n                } else {\n                    return Promise.reject(exceptionError);\n                }\n            } else {\n                return Promise.reject(exceptionError);\n            }\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            // console.log(error.request);\n            let exceptionError = new Error(\"Server Not Responded\");\n            exceptionError.response = \"Server Not Responded\";\n            exceptionError.errors = [\n                \"The Request failed. Please make sure you are connected to Internet\"\n            ];\n            return Promise.reject(exceptionError);\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            let exceptionError = new Error(error.message);\n            exceptionError.response = error.message;\n            exceptionError.errors = [error.message];\n            return Promise.reject(exceptionError);\n        }\n        // console.log(error.config);\n    }\n\n    static fetchFile(path, data) {\n        return Promise.all([this.setDefaults(), this.getFetchAsseyOptions()])\n            .then(responses => {\n                let methodData = _.merge({}, data, { url: path });\n                if (data && data.body) {\n                    methodData.data = methodData.body;\n                }\n                let options = { ...responses[1], ...methodData };\n                return axios\n                    .request(options)\n                    .then(response => {\n                        const headers = response.headers;\n                        this.setTokenHeadersForNextRequest(\n                            headers[\"access-token\"],\n                            headers[\"client\"],\n                            headers[\"expiry\"],\n                            headers[\"uid\"],\n                            headers[\"token-type\"]\n                        );\n                        return response.data;\n                    })\n                    .catch(error => {\n                        return this.errorCatching(error);\n                    });\n            })\n            .catch(error => {\n                // console.log(error)\n                // console.log(error.response)\n                if (error.response) {\n                    return Promise.reject(error);\n                } else {\n                    // console.log(error)\n                    // console.log(error.message)\n                    let exceptionError = new Error(error.message);\n                    exceptionError.response = error.message;\n                    exceptionError.errors = [error.message];\n                    return Promise.reject(exceptionError);\n                }\n            });\n    }\n}\nwindow.AxiosRequest = AxiosRequest;\nwindow.axios = axios;\nwindow.localforage = localforage;\nexport { AxiosRequest };\n","// Import from Config\n// -------------------------------------\nimport { AppConfig } from './../../config/app.config';\n\n// Import from Files\n// -------------------------------------\nimport { FetchRequest } from './FetchRequest';\nimport { AxiosRequest } from './AxiosRequest';\n\nconst extendClass = AppConfig.axiosEnabled ? AxiosRequest : FetchRequest;\n\nclass Request extends extendClass {}\n\n\nexport { Request };","import _ from \"lodash\";\nimport {\n    LOGIN,\n    LOGOUT,\n    SESSION,\n    OMNIAUTHLOGIN,\n    UPDATE_CONFIG,\n    GET_LICENSE,\n    ACCEPT_COOKIES\n} from \"./Authentication.action.react\";\n// import {\n//     ADD_DECK,\n//     DELETE_DECKS\n// } from \"app/courseEditor/redux/FileEditor.action.react\";\n// import { DELETE_FOLDER } from \"app/courseEditor/redux/FolderEditor.action.react\";\n// import {\n//     ADD_LEARNERS,\n//     DELETE_LEARNER\n// } from \"app/courseEditor/redux/LearnerManager.action.react\";\n\nimport { REHYDRATE } from \"redux-persist/constants\";\n\nconst initialAuthState = {\n    error: {},\n    status: \"\",\n    token: null,\n    user: {\n        license: {},\n        client: {\n            appConfiguration: {}\n        }\n    },\n    isUserLoggedIn: false,\n    sessions: []\n};\n\nconst AuthenticationReducer = (state = initialAuthState, action) => {\n    let newState;\n    switch (action.type) {\n        case REHYDRATE:\n            let auth = action.payload.auth;\n            if (auth) {\n                return { ...state, ...auth };\n            } else {\n                return state;\n            }\n        case LOGIN:\n            if (action.status === \"authenticating\") {\n                return { ...state, status: action.status, error: {} };\n            } else if (action.status === \"success\") {\n                return {\n                    ...state,\n                    status: action.status,\n                    user: {\n                        ...action.data,\n                        id: JSON.stringify(action.data.id)\n                    },\n                    isUserLoggedIn: true,\n                    error: {}\n                };\n            } else if (action.status === \"error\")\n                return { ...state, status: action.status, error: action.err };\n            else {\n                return state;\n            }\n        case LOGOUT:\n            if (action.status === \"authenticating\") {\n                return { ...state, status: action.status, error: {} };\n            } else if (action.status === \"success\") {\n                return {\n                    ...state,\n                    status: action.status,\n                    user: null,\n                    isUserLoggedIn: false,\n                    error: {}\n                };\n            } else if (action.status === \"error\")\n                return {\n                    ...state,\n                    status: action.status,\n                    user: null,\n                    isUserLoggedIn: false,\n                    error: action.err\n                };\n            else {\n                return state;\n            }\n        case SESSION:\n            let sessions = [...state.sessions];\n            let startTime = new Date().getTime();\n            let sessionId = 0;\n            const userId = JSON.stringify(state.user.id);\n            if (sessions.length) {\n                let lastSession = _.pullAt(sessions, sessions.length - 1);\n                lastSession.isActive = false;\n                lastSession.endTime = startTime;\n                sessions.push(lastSession);\n                sessionId = _.replace(lastSession.sessionId, userId, \"\");\n            }\n            let sessionData = {\n                sessionId: userId + sessionId,\n                userId: userId,\n                startTime: startTime,\n                isActive: true,\n                endTime: undefined\n            };\n            sessions.push(sessionData);\n            return { ...state, sessions: sessions };\n        case OMNIAUTHLOGIN:\n            if (action.status === \"success\") {\n                return {\n                    ...state,\n                    status: action.status,\n                    user: {\n                        ...action.data,\n                        id: JSON.stringify(action.data.id)\n                    },\n                    isUserLoggedIn: true,\n                    error: {}\n                };\n            } else {\n                return state;\n            }\n        case UPDATE_CONFIG:\n            newState = _.cloneDeep(state);\n            newState.user.client.appConfiguration = Object.assign(\n                {},\n                newState.user.client.appConfiguration,\n                action.data.partConfig\n            );\n            return newState;\n        case GET_LICENSE:\n            newState = _.cloneDeep(state);\n            newState.user.license = Object.assign(\n                {},\n                newState.user.license,\n                action.data.license\n            );\n            return newState;\n        // case DELETE_FOLDER:\n        //     newState = _.cloneDeep(state);\n        //     newState.user.license = Object.assign({}, newState.user.license, {\n        //         usedSpace: Math.max(\n        //             0,\n        //             parseInt(\n        //                 newState.user.license.usedSpace === null\n        //                     ? 0\n        //                     : newState.user.license.usedSpace,\n        //                 0\n        //             ) - action.data.size\n        //         )\n        //     });\n        //     return newState;\n        // case ADD_DECK:\n        //     newState = _.cloneDeep(state);\n        //     newState.user.license = Object.assign({}, newState.user.license, {\n        //         usedSpace:\n        //             parseInt(\n        //                 newState.user.license.usedSpace === null\n        //                     ? 0\n        //                     : newState.user.license.usedSpace,\n        //                 0\n        //             ) + parseInt(action.data.size.split(\"k\")[0], 0)\n        //     });\n        //     return newState;\n        // case DELETE_DECKS:\n        //     newState = _.cloneDeep(state);\n        //     newState.user.license = Object.assign({}, newState.user.license, {\n        //         usedSpace: Math.max(\n        //             0,\n        //             parseInt(\n        //                 newState.user.license.usedSpace === null\n        //                     ? 0\n        //                     : newState.user.license.usedSpace,\n        //                 0\n        //             ) -\n        //                 _.sum(\n        //                     _.map(action.data.decks, deck => {\n        //                         return parseInt(\n        //                             deck.size === null\n        //                                 ? 0\n        //                                 : deck.size.split(\"k\")[0],\n        //                             0\n        //                         );\n        //                     })\n        //                 )\n        //         )\n        //     });\n        //     return newState;\n        // case ADD_LEARNERS:\n        //     newState = _.cloneDeep(state);\n        //     newState.user.license = Object.assign({}, newState.user.license, {\n        //         totalUsers:\n        //             state.user.license === undefined ||\n        //             state.user.license === null ||\n        //             state.user.license.totalUsers === null ||\n        //             state.user.license.totalUsers === undefined\n        //                 ? 0\n        //                 : state.user.license.totalUsers +\n        //                   (action.data !== undefined &&\n        //                   action.data !== null &&\n        //                   action.data.learners !== undefined &&\n        //                   action.data.learners !== null\n        //                       ? action.data.learners.length\n        //                       : 1)\n        //     });\n        //     return newState;\n        // case DELETE_LEARNER:\n        //     newState = _.cloneDeep(state);\n        //     newState.user.license = Object.assign({}, newState.user.license, {\n        //         totalUsers: Math.max(\n        //             0,\n        //             (state.user.license.totalUsers === null ||\n        //             state.user.license.totalUsers === undefined\n        //                 ? 0\n        //                 : state.user.license.totalUsers) - 1\n        //         )\n        //     });\n        //     return newState;\n        case ACCEPT_COOKIES:\n            if (action.status === \"success\") {\n                return { ...state, ...action.data };\n            } else {\n                return state;\n            }\n        default:\n            return state;\n    }\n};\n\nexport { AuthenticationReducer };\n","import { REHYDRATE } from \"redux-persist/constants\";\r\nimport {\r\n    SET_SIM_PARAMS,\r\n} from \"./SimManager.action.react\";\r\n\r\nconst initialParamsState = {\r\n    ai: 0,\r\n    bi: 0,\r\n    ii: 0,\r\n    bc: 0,\r\n    blp: 0,\r\n    unused: [],\r\n    valuation: 0,\r\n    fundRaise: 0,\r\n    dilution: 0,\r\n    co: 0,\r\n    sa: 0,\r\n    cs: 0,\r\n    fr: 0,\r\n    cm: 0,\r\n    blt: 0,\r\n    team: [],\r\n    productFixed: false,\r\n    angelFixed: false,\r\n    teamFixed: false,\r\n    simOver: false,\r\n    lastLocation: \"#\",\r\n    trackers: {\r\n        overtimeCounter: 0\r\n    },\r\n    competencyMap: {\r\n        creative: 0,\r\n        analytical: 0,\r\n        frugal: 0,\r\n        methodical: 0,\r\n        problemSolving: 0,\r\n        decisionMaking: 0,\r\n        balanced: 0,\r\n        timeManagement: 0,\r\n        costManagement: 0,\r\n        resourceful: 0,\r\n        overall:0\r\n    }\r\n};\r\n\r\nconst SimManagerReducer = (state = initialParamsState, action) => {\r\n    let simParams;\r\n    switch (action.type) {\r\n        /* istanbul ignore next - react-persist function */\r\n        case REHYDRATE:\r\n            simParams = action.payload.simParams;\r\n            if (simParams) {\r\n                return Object.assign({}, state, simParams);\r\n            } else {\r\n                return state;\r\n            }\r\n        case SET_SIM_PARAMS:\r\n            return Object.assign({}, state, action.data);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { SimManagerReducer };\r\n","import _ from \"lodash\";\r\nimport { REHYDRATE } from \"redux-persist/constants\";\r\nimport { SAVE_ANSWERS } from \"./QuestionManager.action.react\";\r\n\r\nconst initialParamsState = [];\r\n\r\nconst QuestionManagerReducer = (state = initialParamsState, action) => {\r\n    let questions;\r\n    switch (action.type) {\r\n        /* istanbul ignore next - react-persist function */\r\n        case REHYDRATE:\r\n            questions = action.payload.questions;\r\n            if (questions) {\r\n                return [...state, ...questions];\r\n            } else {\r\n                return state;\r\n            }\r\n        case SAVE_ANSWERS:\r\n            let responses = _.cloneDeep(state);\r\n            _.each(action.data, question => {\r\n                let existingResponse = _.find(responses, {\r\n                    questionId: question.questionId\r\n                });\r\n                if (existingResponse !== undefined)\r\n                    responses.splice(responses.indexOf(existingResponse), 1);\r\n                responses.push(question);\r\n            });\r\n            return responses;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { QuestionManagerReducer };\r\n","// Import from NPM\r\n// -------------------------------------\r\nimport { combineReducers } from \"redux\";\r\nimport { routerReducer } from \"react-router-redux\";\r\n\r\n// Import Reducer Routes\r\n// -------------------------------------\r\nimport { AuthenticationReducer } from \"../authentication/redux/Authentication.reducer.react\";\r\nimport { SimManagerReducer } from \"app/simulation/redux/SimManager.reducer.react\";\r\nimport { QuestionManagerReducer } from \"app/simulation/redux/QuestionManager.reducer.react\";\r\n\r\nlet RootReducer = combineReducers({\r\n    auth: AuthenticationReducer,\r\n    routing: routerReducer,\r\n    simParams: SimManagerReducer,\r\n    questions: QuestionManagerReducer\r\n});\r\n\r\nexport { RootReducer };\r\n","// Import from NPM\r\n// -------------------------------------\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { autoRehydrate, persistStore } from \"redux-persist\";\r\nimport localforage from \"localforage\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// Import Store Setup\r\n// -------------------------------------\r\nimport fakeLocalStorage from \"./FakeLocalStorage\";\r\nimport { Request } from \"../communication/Request\";\r\nimport { RootReducer } from \"./root.reducer\";\r\n\r\n//-------------------------------------------------------------------------------------\r\n// Proxy to figure out if we're in an incompatible environment for localForage\r\n// since redux-persist doesn't play nice when localForage fails to start\r\n//-------------------------------------------------------------------------------------\r\nlet enableLocalForage = true;\r\ntry {\r\n    localStorage.setItem(\"__u\", \"u\");\r\n} catch (e) {\r\n    enableLocalForage = false;\r\n}\r\n//-------------------------------------------------------------------------------------\r\n\r\n//-------------------------------------------------------------------------------------\r\n// Create your app's store\r\n//-------------------------------------------------------------------------------------\r\nconst Store = composeWithDevTools(\r\n    applyMiddleware(thunkMiddleware.withExtraArgument(Request)),\r\n    autoRehydrate()\r\n    // ... add additional middleware here (router, etc.)\r\n)(createStore)(RootReducer);\r\n//-------------------------------------------------------------------------------------\r\n\r\n//-------------------------------------------------------------------------------------\r\n// Persist the states of the whitelisted data trees in localForage if available,\r\n// else in fakeLocalStorage\r\n//-------------------------------------------------------------------------------------\r\nconst persistStoreConfig = {\r\n    whitelist: [\"license\", \"auth\", \"simParams\", \"questions\",\"opsRecords\"],\r\n    storage: enableLocalForage ? localforage : fakeLocalStorage\r\n};\r\n//-------------------------------------------------------------------------------------\r\n\r\nexport { Store, persistStoreConfig, persistStore };\r\n","export const userInterface = {\n    clientApp: true,\n    languageSelection: true,\n    searchEnabled: true,\n    ttsEnabled: false,\n    startOnHome: true,\n    subNavBar: false,\n    authentication: {\n        type: \"email\",\n        label: \"Email address\",\n        help: \"Please enter your email address\",\n        defaultEmail: \"guest@app.quodeck.com\",\n        defaultPassword: \"P@ssw0rd\"\n    },\n    registration: {\n        allowed: false,\n        subtle: false,\n        restricted: false,\n        allowedDomains: []\n    },\n    footer: {\n        isThere: false,\n        text: \"QuoDeck Tech PLC\",\n        hasLogo: true\n    },\n    singleCourse: {\n        isEnabled: false,\n        id: \"\",\n        showMenu: true\n    },\n    ilt: {\n        enabled: false\n    },\n    social: {\n        enabled: false\n    }\n};\n","import _ from \"lodash\";\nimport { apiUrls, endpoints } from \"./configPanel/config.endpoints\";\nimport { namedRoutes } from \"./configPanel/config.namedRoutes\";\nimport { userInterface } from \"./configPanel/config.userInterface\";\nimport {\n    pageStyle,\n    style,\n    appLogoStyle,\n    boxStyle\n} from \"./configPanel/config.loginpage\";\nimport {\n    colors,\n    appStyle,\n    buttonStyle,\n    secondaryButtonStyle,\n    headerStyle,\n    textStyle,\n    textInputStyle,\n} from \"./configPanel/config.design\";\n\nlet fonts = _.union(\n    [\"icomoon\"]\n);\n\nexport const AppConfig = {\n    language: \"en\",\n    secretKey: \"p20o20e13\",\n    axiosEnabled: true, // if false, then please set change request headers on each request in devise_token_auth.rb file as it won't work.\n    clientApp: userInterface.clientApp,\n    authentication: userInterface.authentication,\n    registration: userInterface.registration,\n    isMobile: window.isCordova ? window.isCordova : false,\n    apiUrls: apiUrls,\n    endpoints: endpoints,\n    auth: {\n        routes: namedRoutes,\n        maxSessions: 100,\n        omniauth: []\n    },\n    notifications: {\n        notificationFetchTimeGap: 0, //In Minutes\n        notificatioCountFetchTimeGap: 0 //In Minutes\n    },\n    fonts: {\n        custom: {\n            families: fonts,\n            urls: _.map(fonts.slice(0, -1), function(elm, index) {\n                return \"assets/fonts/\" + elm + \".css\";\n            })\n        }\n    },\n    colors: colors,\n    appStyle: {\n        ...appStyle,\n        fontFamily: [fonts[1], fonts[3]]\n    },\n    buttonStyle: {\n        ...buttonStyle,\n        fontFamily: [fonts[2], fonts[3]]\n    },\n    secondaryButtonStyle: secondaryButtonStyle,\n    headerStyle: {\n        ...headerStyle,\n        fontFamily: [fonts[2], fonts[3]]\n    },\n    textStyle: {\n        ...textStyle,\n        fontFamily: [fonts[1], fonts[3]]\n    },\n    textInputStyle: textInputStyle,\n    pageStyle: {\n        ...pageStyle\n    },\n    style: {\n        ...style\n    },\n    appLogoStyle: {\n        ...appLogoStyle\n    },\n    boxStyle: {\n        ...boxStyle\n    }\n};\n// export { AppConfig };\n","export const namedRoutes = {\n    authenticatedRoot: \"/\",\n    unauthenticatedRoot: \"/login\",\n    login: \"/login\",\n    logout: \"/logout\",\n    signup: \"/signup\",\n    forgotPassword: \"/forgotPassword\",\n    helpDesk: \"/helpDesk\",\n    backListSessionPath: [\n        \"/session/home\",\n        \"/session\",\n        \"/login\",\n        \"logout\",\n        \"/home\",\n        \"/undefined\"\n    ]\n};\n","export const colors = {\n    master: \"#42609c\",\n    masterText: \"#ffffff\",\n    footer: \"#535353\",\n    iconBg: \"#ff0000\",\n    navbar: \"#1995ad\",\n    tileBg: \"#666666\",\n    courseBg: \"#bcbabe\",\n    textList: \"#333\",\n    tileText: \"#ffffff\",\n    iconColor: \"black\",\n    itemImgBg: \"#666\",\n    navbarBtn: \"#bcbabe\",\n    navigator: \"#ffffff\",\n    navsubbar: \"#535353\",\n    topicList: \"#333\",\n    courseName: \"rgba(0,0,0,0.8)\",\n    drawerMenu: \"#bcbabe\",\n    footerText: \"#ffffff\",\n    headerText: \"#fff\",\n    listBarBtn: \"#121212\",\n    tileIconBg: \"#ddd\",\n    headerBlock: \"#1995ad\",\n    overallCard: \"rgba(0,0,0,0.8)\",\n    navbarBtnTxt: \"#000\",\n    listBarLeader: \"#454545\",\n    navigatorHome: \"#ffc900\",\n    navigatorText: \"#000\",\n    drawerMenuItem: \"#cdcbce\",\n    drawerMenuText: \"#000\",\n    listBarBtnText: \"#ffc900\",\n    drawerMenuDarker: \"#cdcbce\",\n    drawerMenuLeader: \"#1995ad\",\n    navbarBtnMenuBtn: \"#fff\",\n    navbarTransparentBtn: \"#fff\",\n    notificationText: \"#111111\",\n    reportsIconColor: \"yellow\",\n    sublogoTextColor: \"#ffffff\",\n    listBarLeaderText: \"#454545\",\n    reportsLabelColor: \"white\",\n    listBarDescription: \"#333333\",\n    completionIndicator: \"rgba(0,0,0,0.8)\",\n    drawerMenuActiveItem: \"#1995ad\",\n    drawerMenuActiveText: \"#fff\",\n    drawerMenuLeaderText: \"#fff\",\n    courseListItemCurrent: \"#1995ad\",\n    drawerMenuDisableItem: \"#888\",\n    drawerMenuDisableText: \"#444\",\n    courseListItemComplete: \"#d3d2d5\",\n    drawerMenuLeaderHeader: \"#ffffff\",\n    listBarDescriptionText: \"#ffffff\",\n    notificationBackground: \"#ffffff\",\n    courseListingHeaderBack: \"#ffffff\",\n    courseListingHeaderText: \"#000000\",\n    courseListItemIncomplete: \"#cdcbce\",\n    courseListItemCurrentText: \"#fff\",\n    courseListItemCompleteText: \"#000\",\n    courseListItemIncompleteText: \"#000\"\n};\nexport const appStyle = {\n    background: \"#000000\",\n    backgroundImage: \"assets/images/configurable/background.gif\",\n    libraryBg: \"assets/images/configurable/libraryBg.jpg\",\n    desktopImage: \"assets/images/configurable/desktopBg.jpg\",\n    landscapeBg: \"assets/images/configurable/landscapeBg.jpg\",\n    brandingLogo: \"assets/images/configurable/logo.png\",\n    loginLogo: \"assets/images/configurable/logo.png\",\n    coLogo: \"assets/images/configurable/cologo.png\",\n    footerLogo: \"assets/images/configurable/footerlogo.png\"\n};\nexport const buttonStyle = {\n    background: \"#ffc900\",\n    color: \"#000\",\n    borderRadius: \"0\"\n};\nexport const secondaryButtonStyle = {\n    background: \"#0a97b7\",\n    color: \"#ffffff\",\n    borderRadius: \"0\"\n};\nexport const headerStyle = {};\nexport const textStyle = {};\nexport const textInputStyle = {\n    background: \"#ffeee0\",\n    padding: \"10px\",\n    fontSize: \"1.2em\",\n    color: \"#000000\"\n};\n","export const pageStyle = {\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n    top: \"0\",\n    left: \"0\"\n};\nexport const style = {\n    padding: \"30px\",\n    background: \"#0a97b7\",\n    width: \"80%\",\n    margin: \"10%\"\n};\nexport const appLogoStyle = {\n    width: \"70%\",\n    margin: \"15%\",\n    display: \"block\"\n};\nexport const boxStyle = {\n    padding: \"30px\",\n    background: \"#0a97b7\",\n    width: \"80%\",\n    margin: \"10%\",\n    color: \"#fff\"\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import from NPM\n// -------------------------------------\nimport React from \"react\";\nimport localforage from \"localforage\";\nimport { Router, Route, hashHistory } from \"react-router\";\nimport { syncHistoryWithStore } from \"react-router-redux\";\nimport Loadable from \"react-loadable\";\nimport WebFont from \"webfontloader\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./../config/configPanel/overrule.css\";\n\n// Import from Config\n// -------------------------------------\nimport {\n    Store,\n    persistStore,\n    persistStoreConfig\n} from \"./../state/storage/app.store\";\nimport { getAppConfig } from \"./../config/client.config\";\nimport { AppConfig } from \"./../config/app.config\";\n\n// Import Helpers\n// -------------------------------------\nimport { Loading } from \"./../globals/Loading.react\";\n\nconst LoadableAuthenticationContainer = Loadable({\n    loader: () =>\n        import(\n            \"./../state/authentication/AuthenticationContainer.react\" /* webpackChunkName: \"authentication\" */\n        ),\n    loading: Loading\n});\nconst LoadableWelcome = Loadable({\n    loader: () =>\n        import(\n            \"./simulation/WelcomeContainer.react\" /* webpackChunkName: \"welcome\" */\n        ),\n    loading: Loading\n});\nconst LoadableSimulation = Loadable({\n    loader: () =>\n        import(\n            \"./simulation/SimulationContainer.react\" /* webpackChunkName: \"welcome\" */\n        ),\n    loading: Loading\n});\nconst LoadableSurvey = Loadable({\n    loader: () =>\n        import(\n            \"./simulation/SurveyContainer.react\" /* webpackChunkName: \"welcome\" */\n        ),\n    loading: Loading\n});\nconst LoadableResult = Loadable({\n    loader: () =>\n        import(\n            \"./simulation/ResultContainer.react\" /* webpackChunkName: \"welcome\" */\n        ),\n    loading: Loading\n});\nconst LoadableUserList = Loadable({\n    loader: () =>\n        import(\n            \"app/simulation/UserListContainer.react\" /* webpackChunkName: \"userlist\" */\n        ),\n    loading: Loading\n});\nconst LoadableAnalytics = Loadable({\n    loader: () =>\n        import(\n            \"app/simulation/AnalyticsContainer.react\" /* webpackChunkName: \"analytics\" */\n        ),\n    loading: Loading\n});\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rehydrated: false\n        };\n        this.requireLogin = this.requireLogin.bind(this);\n        this.alreadyLoggedIn = this.alreadyLoggedIn.bind(this);\n        this.manageStore = window.manageStore = this.manageStore.bind(this);\n        this.manageStore();\n        WebFont.load(getAppConfig().fonts);\n    }\n\n    manageStore = purge => {\n        if (purge === \"purge\") {\n            persistStore(Store, persistStoreConfig).purge();\n            localforage.removeItem(\"tokenHash\");\n        } else {\n            persistStore(Store, persistStoreConfig, () => {\n                let existing_user = window.localStorage.getItem(\n                    \"reduxPersist:auth\"\n                );\n                if (existing_user) {\n                    localforage.setItem(\"reduxPersist:auth\", existing_user);\n                }\n                this.setState({ rehydrated: true });\n            });\n        }\n    };\n\n    requireLogin(nextState, replace, callback) {\n        const unauthRoot = getAppConfig().auth.routes.unauthenticatedRoot;\n        const auth = Store.getState().auth;\n        if (!auth.isUserLoggedIn) {\n            replace(unauthRoot);\n        }\n        callback();\n    }\n\n    alreadyLoggedIn(nextState, replace, callback) {\n        const authRoot = AppConfig.auth.routes.authenticatedRoot;\n        const auth = Store.getState().auth;\n        if (auth.isUserLoggedIn) {\n            replace(authRoot);\n        }\n        callback();\n    }\n\n    render() {\n        let noOverflow = {\n            // overflow: \"hidden auto\",\n            height: \"100vh\"\n        };\n        let appStyle = {\n            ...getAppConfig().appStyle,\n            position: \"relative\",\n            height: \"100%\",\n            background: \"inherit\"\n        };\n\n        let returnValue = (\n            <div style={noOverflow}>\n                <div style={appStyle}>\n                    <Router history={syncHistoryWithStore(hashHistory, Store)}>\n                        <Route\n                            path=\"/register\"\n                            component={LoadableAuthenticationContainer}\n                            onEnter={this.alreadyLoggedIn}\n                        />\n                        <Route\n                            path=\"/logout\"\n                            component={LoadableAuthenticationContainer}\n                            onEnter={this.requireLogin}\n                        />\n                        <Route\n                            path=\"/login\"\n                            component={LoadableAuthenticationContainer}\n                            onEnter={this.alreadyLoggedIn}\n                        />\n                        <Route\n                            path=\"/\"\n                            component={LoadableWelcome}\n                            onEnter={this.requireLogin}\n                        />\n                        <Route\n                            path=\"/simulation/:id\"\n                            component={LoadableSimulation}\n                            onEnter={this.requireLogin}\n                        />\n                        <Route\n                            path=\"/simulation_questions/:id\"\n                            component={LoadableSurvey}\n                            onEnter={this.requireLogin}\n                        />\n                        <Route\n                            path=\"/result/:id\"\n                            component={LoadableResult}\n                            onEnter={this.requireLogin}\n                        />\n                        <Route\n                        path=\"/analytics\"\n                        component={LoadableUserList}\n                        onEnter={this.requireLogin}\n                    />\n                    <Route\n                        path=\"/analytics/:id\"\n                        component={LoadableAnalytics}\n                        onEnter={this.requireLogin}\n                    />\n                    </Router>\n                </div>\n            </div>\n        );\n        if (!this.state.rehydrated) {\n            returnValue = <Loading />;\n        }\n        return returnValue;\n    }\n}\n\nexport default App;\n","// Import from NPM\n// -------------------------------------\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\n// Import App Configuration and Setup\n// -------------------------------------\nimport { Store } from \"state/storage/app.store\";\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\";\n\n// Import App\n// -------------------------------------\nimport App from \"app/App\";\n\nReactDOM.render(\n    <Provider store={Store} key=\"provider\">\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n// ServiceWorker.unregister();","import _ from \"lodash\";\nimport { AppConfig } from \"./../../../config/app.config\";\n\n/*\n * Actions\n */\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SESSION = \"SESSION\";\nexport const FORGOTPASSW = \"FORGOTPASSW\";\nexport const OMNIAUTHLOGIN = \"OMNIAUTHLOGIN\";\nexport const UPDATE_CONFIG = \"UPDATE_CONFIG\";\nexport const GET_LICENSE = \"GET_LICENSE\";\nexport const ACCEPT_COOKIES = \"ACCEPT_COOKIES\";\n\n/*\n * Action Creators\n */\n\nfunction _login(status, err, data) {\n    return {\n        type: LOGIN,\n        status,\n        err,\n        data\n    };\n}\n\nfunction _logout(status, err, data) {\n    return {\n        type: LOGOUT,\n        status,\n        err,\n        data\n    };\n}\n\nfunction _session(status, err, data) {\n    return {\n        type: SESSION,\n        status,\n        err,\n        data\n    };\n}\n\nfunction _omniauthLogin(status, err, data) {\n    return {\n        type: OMNIAUTHLOGIN,\n        status,\n        err,\n        data\n    };\n}\nfunction _updateConfig(status, err, data) {\n    return {\n        type: UPDATE_CONFIG,\n        status,\n        err,\n        data\n    };\n}\nfunction _getLicense(status, err, data) {\n    return {\n        type: GET_LICENSE,\n        status,\n        err,\n        data\n    };\n}\n\nexport const preprocessLoginDetails = (firstField, passwordField) => {\n    let processedFirstField = _.chain(firstField)\n        .trim()\n        .toLower()\n        .value();\n    const processedPasswordField = _.chain(passwordField)\n        .split(\" \")\n        .join(\"\")\n        .value();\n\n    return {\n        processedFirstField,\n        processedPasswordField\n    };\n};\n\nexport const validateLoginDetails = (firstField, firstFieldType) => {\n    let errorMessage = null;\n    if (\n        firstFieldType &&\n        firstFieldType === \"email\" &&\n        !_.includes(firstField, \"@\")\n    ) {\n        errorMessage =\n            \"Email is invalid format, please check the email you have entered.\";\n    }\n    return errorMessage;\n};\n\n// function login(firstField, password, apiURL) {\n//     return (dispatch, getState, Request) => {\n//         // let formData = new FormData();\n//         let loginDetails = preprocessLoginDetails(firstField, password);\n//         const validateLoginDetail = validateLoginDetails(firstField, \"email\");\n//         if (!validateLoginDetail) {\n//             // formData.append(\"email\", loginDetails.processedFirstField);\n//             // formData.append(\"password\", loginDetails.processedPasswordField);\n//             const loginPath = AppConfig.endpoints.emailSignInPath;\n//             var postData = {\n//                 email: loginDetails.processedFirstField,\n//                 password: loginDetails.processedPasswordField\n//               };\n\n//             let axiosConfig = {\n//                 headers: {\n//                     'Content-Type': 'application/json;charset=UTF-8'\n//                 }\n//             };\n//             let url = \"http://localhost:3000\" + loginPath;\n//             // return Request.fetch(\n//             //     loginPath,\n//             //     {\n//             //         method: \"POST\",\n//             //         body: formData\n//             //     },\n//             //     apiURL\n//             // )\n//             return axios.post(url, postData, axiosConfig)\n//                 .then(response => {\n//                     return response;\n//                 })\n//                 .then(userData => {\n//                     return dispatch(\n//                         _login(\"success\", null, {\n//                             id: userData.data.id,\n//                             email: userData.data.email//,\n//                             // uid: userData.data.uid,\n//                             // provider: userData.data.provider,\n//                             // username: userData.data.username,\n//                             // first_name: userData.data.first_name,\n//                             // last_name: userData.data.last_name,\n//                             // admin: userData.data.admin,\n//                             // system_generated: userData.data.system_generated,\n//                             // total_online_time: userData.data.total_online_time,\n//                             // total_first_online_time:\n//                             //     userData.data.total_first_online_time,\n//                             // user_active: userData.data.user_active,\n//                             // role_select: userData.data.role_select,\n//                             // isUserLoggedIn: userData.data.isUserLoggedIn,\n//                             // license: userData.data.license,\n//                             // client: {\n//                             //     id: userData.data.client.id,\n//                             //     name: userData.data.client.name,\n//                             //     appConfiguration:\n//                             //         userData.data.client.app_configuration\n//                             // }\n//                         })\n//                     );\n//                 })\n//                 .catch(err => {\n//                     dispatch(_login(\"error\", err, null));\n//                     return Promise.reject(err);\n//                 });\n//         } else {\n//             return Promise.resolve({\n//                 status: 500,\n//                 errors: [validateLoginDetail]\n//             });\n//         }\n//     };\n// }\n\nfunction register(name, email, password, confirm) {\n    return (dispatch, getState, Request) => {\n        const emailRegistrationPath = AppConfig.endpoints.emailRegistrationPath;\n        let formData = new FormData();\n        let hasError = false;\n        let errorText = \"\";\n        if (hasError) {\n            return Promise.reject(\n                dispatch(\n                    _login(\n                        \"error\",\n                        {\n                            response: {\n                                status: \"error\",\n                                err: {\n                                    errors: {\n                                        full_messages: [errorText]\n                                    }\n                                }\n                            }\n                        },\n                        null\n                    )\n                )\n            );\n        } else {\n            formData.append(\n                \"email\",\n                _.chain(email)\n                    .trim()\n                    .toLower()\n                    .value()\n            );\n            formData.append(\"password\", password);\n            formData.append(\"password_confirmation\", password);\n            return Request.fetch(emailRegistrationPath, {\n                method: \"POST\",\n                body: formData\n            })\n                .then(response => {\n                    return response.json();\n                })\n\n                .then(userData => {\n                    userData = userData.data;\n                    return dispatch(\n                        _login(\"success\", null, {\n                            id: userData.id,\n                            email: userData.email,\n                            uid: userData.uid,\n                            provider: userData.provider\n                        })\n                    );\n                })\n                .catch(err => {\n                    return dispatch(_login(\"error\", err, null));\n                });\n        }\n    };\n}\n\nfunction login(firstField, password, apiURL) {\n    return (dispatch, getState, Request) => {\n        let formData = new FormData();\n        let loginDetails = preprocessLoginDetails(firstField, password);\n        const validateLoginDetail = validateLoginDetails(firstField, \"email\");\n        if (!validateLoginDetail) {\n            formData.append(\"email\", loginDetails.processedFirstField);\n            formData.append(\"password\", loginDetails.processedPasswordField);\n            const loginPath = AppConfig.endpoints.emailSignInPath;\n            return Request.fetch(\n                loginPath,\n                {\n                    method: \"POST\",\n                    body: formData\n                },\n                apiURL\n            )\n                .then(response => {\n                    return response.json();\n                })\n                .then(userData => {\n                    return dispatch(\n                        _login(\"success\", null, {\n                            id: userData.data.id,\n                            email: userData.data.email,\n                            uid: userData.data.uid,\n                            provider: userData.data.provider\n                            // username: userData.data.username,\n                            // first_name: userData.data.first_name,\n                            // last_name: userData.data.last_name,\n                            // admin: userData.data.admin,\n                            // system_generated: userData.data.system_generated,\n                            // total_online_time: userData.data.total_online_time,\n                            // total_first_online_time:\n                            //     userData.data.total_first_online_time,\n                            // user_active: userData.data.user_active,\n                            // role_select: userData.data.role_select,\n                            // isUserLoggedIn: userData.data.isUserLoggedIn,\n                            // license: userData.data.license,\n                            // client: {\n                            //     id: userData.data.client.id,\n                            //     name: userData.data.client.name,\n                            //     appConfiguration:\n                            //         userData.data.client.app_configuration\n                            // }\n                        })\n                    );\n                })\n                .catch(err => {\n                    dispatch(_login(\"error\", err, null));\n                    return Promise.reject(err);\n                });\n        } else {\n            return Promise.resolve({\n                status: 500,\n                errors: [validateLoginDetail]\n            });\n        }\n    };\n}\n\nfunction bypassLogin() {\n    return (dispatch, getState, Request) => {\n        const loginPath = AppConfig.endpoints.emailSignInPathBypass;\n        let formData = new FormData();\n        return Request.fetch(loginPath, {\n            method: \"POST\",\n            body: formData,\n            credentials: \"include\"\n        })\n            .then(response => {\n                return response.json();\n            })\n            .then(userData => {\n                return dispatch(\n                    _login(\"success\", null, {\n                        id: userData.data.id,\n                        email: userData.data.email,\n                        uid: userData.data.uid,\n                        provider: userData.data.provider,\n                        username: userData.data.username,\n                        first_name: userData.data.first_name,\n                        last_name: userData.data.last_name,\n                        admin: userData.data.admin,\n                        system_generated: userData.data.system_generated,\n                        total_online_time: userData.data.total_online_time,\n                        total_first_online_time:\n                            userData.data.total_first_online_time,\n                        user_active: userData.data.user_active,\n                        role_select: userData.data.role_select,\n                        isUserLoggedIn: userData.data.isUserLoggedIn,\n                        client: {\n                            name: userData.data.client.name,\n                            appConfiguration:\n                                userData.data.client.app_configuration\n                        }\n                    })\n                );\n            })\n            .catch(err => {\n                dispatch(_login(\"error\", err, null));\n                return Promise.reject(err);\n            });\n    };\n}\n\nfunction forgotPassword(email) {\n    return (dispatch, getState, Request) => {\n        let formData = new FormData();\n        email = _.chain(email)\n            .trim()\n            .toLower()\n            .value();\n        formData.append(\"email\", email);\n        formData.append(\"redirect_url\", \"/login\");\n        const passwChangePath = AppConfig.endpoints.emailForgotPasswPath;\n        return Request.fetch(passwChangePath, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: formData\n        })\n            .then(response => {\n                return response.json();\n            })\n            .catch(err => {\n                return Promise.reject(err);\n            });\n    };\n}\n\nfunction logout() {\n    return (dispatch, getState, Request) => {\n        dispatch(_logout(\"fetching\"));\n        const logoutPath = AppConfig.endpoints.signOutPath;\n        return Request.fetch(logoutPath, {\n            method: \"POST\",\n            body: \"\"\n        })\n            .then(() => {\n                Request.resetToken();\n            })\n            .then(() => {\n                return dispatch(_logout(\"success\"));\n            })\n            .catch(err => {\n                // If some errors still log him out of application\n                Request.resetToken();\n                return dispatch(_logout(\"error\", err));\n            });\n    };\n}\n\nfunction session() {\n    return (dispatch, getState, Request) => {\n        return Promise.resolve(dispatch(_session()));\n    };\n}\n\nfunction omniAuthLogin(userDetail) {\n    return (dispatch, getState, Request) => {\n        const accessToken = userDetail[\"access_token\"];\n        Request.setToken(\n            accessToken[\"access-token\"],\n            accessToken.client,\n            accessToken.expiry,\n            accessToken[\"token-type\"],\n            accessToken.uid\n        );\n        return Promise.resolve(\n            dispatch(\n                _omniauthLogin(\n                    \"success\",\n                    null,\n                    _.omit(userDetail, \"access-token\")\n                )\n            )\n        );\n    };\n}\n\nfunction updateConfig(configHash) {\n    return (dispatch, getState, Request) => {\n        const updateConfigPath = AppConfig.endpoints.updateConfigPath.replace(\n            \":id\",\n            getState().auth.user.client.id\n        );\n        return Promise.resolve(\n            dispatch(\n                _updateConfig(\"success\", null, {\n                    partConfig: configHash\n                })\n            )\n        ).then(() => {\n            return Request.fetch(updateConfigPath, {\n                method: \"PATCH\",\n                body: JSON.stringify({\n                    client: {\n                        name: getState().auth.user.client.name,\n                        app_configuration: configHash\n                    }\n                })\n            })\n                .then(response => {\n                    return response.json();\n                })\n                .then(resp => {})\n                .catch(err => {\n                    console.log(err);\n                });\n        });\n    };\n}\n\nfunction getLicense() {\n    return (dispatch, getState, Request) => {\n        const getLicensePath = AppConfig.endpoints.getLicensePath.replace(\n            \":id\",\n            getState().auth.user.license.id\n        );\n\n        return Request.fetch(getLicensePath)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                return Promise.resolve(\n                    dispatch(\n                        _getLicense(\"success\", null, {\n                            license: data\n                        })\n                    )\n                );\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n}\nclass AuthenticationAction {\n    static login = login;\n    static register = register;\n    static logout = logout;\n    static session = session;\n    static forgotPassword = forgotPassword;\n    static omniAuthLogin = omniAuthLogin;\n    static bypassLogin = bypassLogin;\n    static updateConfig = updateConfig;\n    static getLicense = getLicense;\n}\n\nexport { AuthenticationAction };\n","// Import from NPM\n// -------------------------------------\nimport React from \"react\";\n\nclass Loading extends React.Component {\n    render() {\n        return (\n            <div\n                style={{\n                    width: \"100vw\",\n                    height: \"100vh\"\n                }}\n            >\n                <img\n                    src=\"assets/images/configurable/fploading.gif\"\n                    style={{\n                        position: \"absolute\",\n                        top: \"65%\",\n                        left: \"50%\",\n                        transform: \"translate(-50%,-50%)\"\n                    }}\n                    alt=\"Loading Gif\"\n                />\n                <img\n                    src=\"assets/images/configurable/logo.png\"\n                    style={{\n                        position: \"absolute\",\n                        top: \"30%\",\n                        left: \"50%\",\n                        transform: \"translate(-50%,-50%)\",\n                        maxWidth: \"80vw\"\n                    }}\n                    alt=\"Logo\"\n                />\n            </div>\n        );\n    }\n}\n\nexport { Loading };\n","export const apiUrls = {\n    apiUrl: \"http://mbs.techknowzeal.com/\",\n    assetUrl: \"http://mbs.techknowzeal.com/\",\n    assetLib: \"assets\"\n};\nexport const endpoints = {\n    signOutPath: \"/api/v1/auth/sign_out\",\n    emailSignInPath: \"/api/v1/auth/sign_in\",\n    emailRegistrationPath: \"/api/v1/auth\",\n    emailForgotPasswPath: \"/api/v1/auth/password\",\n    passwordResetPath: \"/api/v1/auth/password\",\n    passwordUpdatePath: \"/api/v1/auth/password\",\n    tokenValidationPath: \"/api/v1/auth/validate_token\",\n    simulationResultPath: \"/api/v1/simulation_results\",\n};\n","import { Store } from \"./../state/storage/app.store\";\nimport { AppConfig } from \"./app.config\";\nimport _ from \"lodash\";\n\nexport const getAppConfig = () => {\n    const initalState = AppConfig;\n    let storeState = {};\n    if (\n        Store.getState().auth.user &&\n        Store.getState().auth.user.client &&\n        Store.getState().auth.user.client.appConfiguration\n    ) {\n        storeState =\n            Store.getState().auth.user.client.appConfiguration || {};\n    }\n    const result = _.merge(initalState, storeState);\n    return result;\n};\n","import _ from \"lodash\";\nimport { getAppConfig } from \"config/client.config\";\n\nexport const SET_SIM_PARAMS = \"SET_SIM_PARAMS\";\n\nconst _setSimParams = (status, data, err) => {\n    return {\n        type: SET_SIM_PARAMS,\n        data,\n        err,\n        status\n    };\n};\n\nconst setLastLocation = location => {\n    return (dispatch, getState, Request) => {\n        return Promise.resolve(\n            dispatch(\n                _setSimParams(\n                    \"Setting Last Location\",\n                    {\n                        lastLocation: location\n                    },\n                    null\n                )\n            )\n        );\n    };\n};\n\nconst endSim = (simulationId) => {\n    return (dispatch, getState, Request) => {\n        let questions = getState().questions;\n        let simParams = getState().simParams;\n\n        // Creativity Calculations\n        //==================================\n        let creativeScore = 0;\n        _.each(questions, question => {\n            if (question.score !== undefined)\n                creativeScore = creativeScore + question.score;\n        });\n        let creative = Math.round(creativeScore * 3.33);\n\n        // Time Management Calculations\n        //==================================\n        let timeManagement = Math.round(\n            100 * Math.max(0, 1 - simParams.trackers.overtimeCounter / 26)\n        );\n\n        // Balance Calculations\n        //==================================\n        let balanced = Math.round((simParams.blp + simParams.blt) / 2);\n\n        // Cost Consciousness Calculations\n        //==================================\n        let costScore = 0;\n\n        // Decision Making Calculations\n        //==================================\n        let decisionMaking = Math.min(\n            100,\n            80\n        );\n\n        // Resourceful Calculations\n        //==================================\n        let resourceful = 50;\n\n        let problemSolving = Math.min(100, 50)\n\n        // Aggregation Calculations\n        //==================================\n        let analytical = Math.round(\n            0.6 * problemSolving + 0.4 * decisionMaking\n        );\n        let frugal = Math.round(0.5 * costScore + 0.5 * resourceful);\n        let methodical = Math.round(0.5 * timeManagement + 0.5 * balanced);\n\n        return Promise.resolve(\n            dispatch(\n                _setSimParams(\n                    \"Ending Sim\",\n                    {\n                        competencyMap: {\n                            timeManagement: timeManagement,\n                            balanced: balanced,\n                            costManagement: costScore,\n                            decisionMaking: decisionMaking,\n                            problemSolving: problemSolving,\n                            resourceful: resourceful,\n\n                            creative: creative,\n                            analytical: analytical,\n                            frugal: frugal,\n                            methodical: methodical,\n                            overall: Math.round(\n                                0.25 * creative +\n                                    0.25 * analytical +\n                                    0.25 * methodical +\n                                    0.25 * frugal\n                            )\n                        },\n                        simOver: true\n                    },\n                    null\n                )\n            )\n        )\n            .then(() => {\n                simParams = getState().simParams;\n                const userId = getState().auth.user.id;\n                let data = {\n                    questions: questions,\n                    simParams: simParams\n                };\n                let body = { user_id: userId, simulation_id: simulationId, user_data: data };\n                return Request.fetch(getAppConfig().endpoints.simulationResultPath, {\n                    method: \"POST\",\n                    body: JSON.stringify(body)\n                });\n            })\n            .catch(err => {\n                dispatch(_setSimParams(\"error\", err, null));\n                return Promise.reject(err);\n            });\n    };\n};\n\nclass SimManagerAction {\n    static setLastLocation = setLastLocation;\n    static endSim = endSim;\n}\n\nexport default SimManagerAction;\n\n// const avg = array => {\n//     return _.sum(array) / array.length;\n// };\n\n// const stdev = array => {\n//     return Math.sqrt(\n//         _.sum(_.map(array, i => Math.pow(i - avg(array), 2))) / array.length\n//     );\n// };\n","export const SAVE_ANSWERS = \"SAVE_ANSWERS\";\n\nconst _saveAnswer = (status, data, err) => {\n    return {\n        type: SAVE_ANSWERS,\n        data,\n        err,\n        status\n    };\n};\n\nconst saveAnswers = answers => {\n    return (dispatch, getState, Request) => {\n        return Promise.resolve(\n            dispatch(_saveAnswer(\"Saving Answers\", answers, null))\n        );\n    };\n};\n\nclass QuestionManagerAction {\n    static saveAnswers = saveAnswers;\n}\n\nexport default QuestionManagerAction;\n"],"sourceRoot":""}